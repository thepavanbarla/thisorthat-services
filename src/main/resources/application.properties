# Profile
spring.profiles.active=@spring.profiles.active@

# SQL Queries for DAO
sql.user.create=insert into USER (user_id, user_name, email, password, phone_number, gender, dob, full_name, bio, profile_picture, is_private, created_at, last_modified, is_active) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, current_timestamp, current_timestamp, 1)
sql.user.update=update USER set user_name = ?, gender = ?, dob = ?, full_name = ?, profile_picture = ? where user_id = ?
sql.user.update.cover=update USER set cover_picture = ? where user_id = ?
sql.user.update.profile=update USER set user_name = ?, full_name = ?, profile_picture = ?, website = ?, bio = ? where user_id = ?
sql.user.update.privacy=update USER set is_private = ? where user_id = ?
sql.user.verify=select user_id, password from USERS where user_name = ? or email = ?
sql.user.email.check=select count(user_id) user_count from USER where email = ?
sql.user.userName.check=select count(user_id) user_count from USER where user_name = ?
sql.user.by.id=select * from USER where user_id = ?
sql.user.by.username=select * from USER where user_name = ?
sql.user.search.username=select * from USER where user_name LIKE ? or LOWER(full_name) like ? LIMIT ? OFFSET ?

# FOLLOW queries
sql.insert.to.follow=insert into FOLLOW (src_user_id, tgt_user_id, accepted, created_at) values (?, ?, 0, current_timestamp)
sql.update.follow=update FOLLOW set accepted = 1, accepted_at = current_timestamp where tgt_user_id = ? and src_user_id = ?
sql.delete.from.follow=delete from FOLLOW where src_user_id = ? and tgt_user_id = ?
sql.user.fetch.followers=select user_id, user_name, full_name, profile_picture from USER u join FOLLOW f on u.user_id = f.src_user_id where f.tgt_user_id = ? and f.accepted = 1 LIMIT ? OFFSET ?
sql.user.fetch.following=select user_id, user_name, full_name, profile_picture from USER u join FOLLOW f on u.user_id = f.tgt_user_id where f.src_user_id = ? and f.accepted = 1 LIMIT ? OFFSET ?
sql.user.following.ids=select tgt_user_id from FOLLOW where src_user_id = ? and accepted = 1
sql.user.follow.status=select * from FOLLOW where src_user_id = ? and tgt_user_id = ?

# USER_STATS queries
sql.user.stats=select * from user_stats where user_id = ?
sql.user.stats.update.posts=INSERT INTO user_stats (user_id, followers_count, posts_count, following_count) VALUES (?, 0, 1, 0) ON DUPLICATE KEY UPDATE posts_count=posts_count+?
#update user_stats set posts_count = ? where user_id = ?

#USER_PREFERENCE queries
sql.user.preference.get=SELECT * FROM USER_PREFERENCE WHERE user_id = ?
sql.user.preference.update=INSERT INTO USER_PREFERENCE (user_id, allow_notifications, allow_post_notifications, allow_follow_notifications) VALUES (?, ?, ?, ?) ON DUPLICATE KEY UPDATE allow_notifications = VALUES(allow_notifications), allow_post_notifications = VALUES(allow_post_notifications), allow_follow_notifications = VALUES(allow_follow_notifications)

sql.user.add.device=INSERT INTO USER_DEVICES (user_id, device_fcm_token, register_time) VALUES (?, ?, current_timestamp) ON DUPLICATE KEY UPDATE user_id = VALUES(user_id), register_time = current_timestamp
sql.user.remove.device=delete from USER_DEVICES where user_id = ? and device_fcm_token = ?
sql.user.fetch.devices=select device_fcm_token from USER_DEVICES where user_id = ?

sql.tags.search=select * from TAGS where tag LIKE ? LIMIT 10
sql.interests.fetch.all=select * from interests_master
sql.interests.fetch.user=select * from interests_master where interest_tag in (?)
sql.tags.add=insert into tags (tag, post_count) values (?, 1) ON DUPLICATE KEY UPDATE post_count = post_count + 1

s3.users.image.path=user-pictures/
s3.posts.image.path=post-pictures/
s3.tiny.image.width=64
s3.post.small.image.width=384
s3.post.medium.image.width=640
s3.post.full.image.width=1200
s3.user.small.image.width=256
s3.user.full.image.width=512

server.tomcat.additional-tld-skip-patterns=*.jar
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
